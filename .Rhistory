R23 <- simfct_parallel(sample_size = N_medium,rows_no = rows_small,
cols_no = cols_large, rho = rho_high,
phi = phi_low, n_sim =10000, covariates=p_100,
intercept="row_intercept",
max_iter = 20, tol = 1e-6,
corstr_rows = "independence",
corstr_cols = "Exchangeable",
family = gaussian(), alpha=0.05, a_R=a_R_18, B=B)
})
#Save results
saveRDS(R23, file = "results/scenario_18_R23.rds")
#Read results
R23 <- readRDS("results/scenario_18_R23.rds")
R23
##Exchangeable, ar1
system.time ({
R24 <- simfct_parallel(sample_size = N_medium,rows_no = rows_small,
cols_no = cols_large, rho = rho_high,
phi = phi_low, n_sim =10000, covariates=p_100,
intercept="row_intercept",
max_iter = 20, tol = 1e-6,
corstr_rows = "Exchangeable",
corstr_cols = "ar1",
family = gaussian(), alpha=0.05, a_R=a_R_18, B=B)
})
#Save results
saveRDS(R24, file = "results/scenario_18_R24.rds")
#Read results
R24 <- readRDS("results/scenario_18_R24.rds")
R24
##Exchangeable, Exchangeable
system.time ({
R25 <- simfct_parallel(sample_size = N_medium,rows_no = rows_small,
cols_no = cols_large, rho = rho_high,
phi = phi_low, n_sim =10000, covariates=p_100,
intercept="row_intercept",
max_iter = 20, tol = 1e-6,
corstr_rows = "Exchangeable",
corstr_cols = "Exchangeable",
family = gaussian(), alpha=0.05, a_R=a_R_18, B=B)
})
#Save results
saveRDS(R25, file = "results/scenario_18_R25.rds")
#Read results
R25 <- readRDS("results/scenario_18_R25.rds")
R25
## ar1, Exchangeable
system.time ({
R26 <- simfct_parallel(sample_size = N_medium,rows_no = rows_small,
cols_no = cols_large, rho = rho_high,
phi = phi_low, n_sim =10000, covariates=p_100,
intercept="row_intercept",
max_iter = 20, tol = 1e-6,
corstr_rows = "ar1",
corstr_cols = "Exchangeable",
family = gaussian(), alpha=0.05, a_R=a_R_18, B=B)
})
#Save results
saveRDS(R26, file = "results/scenario_18_R26.rds")
#Read results
R26 <- readRDS("results/scenario_18_R26.rds")
R26
##Exchangeable, independence
system.time ({
R27 <- simfct_parallel(sample_size = N_medium,rows_no = rows_small,
cols_no = cols_large, rho = rho_high,
phi = phi_low, n_sim =10000, covariates=p_100,
intercept="row_intercept",
max_iter = 20, tol = 1e-6,
corstr_rows = "Exchangeable",
corstr_cols = "independence",
family = gaussian(), alpha=0.05, a_R=a_R_18, B=B)
})
#Save results
saveRDS(R27, file = "results/scenario_18_R27.rds")
#Read results
R27 <- readRDS("results/scenario_18_R27.rds")
R27
##ar1, independence
system.time ({
R28 <- simfct_parallel(sample_size = N_medium,rows_no = rows_small,
cols_no = cols_large, rho = rho_high,
phi = phi_low, n_sim =10000, covariates=p_100,
intercept="row_intercept",
max_iter = 20, tol = 1e-6,
corstr_rows = "ar1",
corstr_cols = "independence",
family = gaussian(), alpha=0.05, a_R=a_R_18, B=B)
})#Save results
saveRDS(R28, file = "results/scenario_18_R28.rds")
#Read results
R28 <- readRDS("results/scenario_18_R28.rds")
R28
R_summary_100 <- bind_rows(
extract_results("results/scenario_18_R21.rds", "independence", "independence", N=100),
extract_results("results/scenario_18_R22.rds", "independence", "ar1", N=100),
extract_results("results/scenario_18_R23.rds", "independence", "Exchangeable", N=100),
extract_results("results/scenario_18_R24.rds", "Exchangeable", "ar1", N=100),
extract_results("results/scenario_18_R25.rds", "Exchangeable", "Exchangeable", N=100),
extract_results("results/scenario_18_R26.rds", "ar1", "Exchangeable", N=100),
extract_results("results/scenario_18_R27.rds", "Exchangeable", "independence", N=100),
extract_results("results/scenario_18_R28.rds", "ar1", "independence", N=100)
)
R_summary_100
############################## N_large #########################
##independence, independence
system.time ({
R31 <- simfct_parallel(sample_size = N_large,rows_no = rows_small,
cols_no = cols_large, rho = rho_high,
phi = phi_low, n_sim =10000, covariates=p_500,
intercept="row_intercept",
max_iter = 20, tol = 1e-6,
corstr_rows = "independence",
corstr_cols = "independence",
family = gaussian(), alpha=0.05, a_R=a_R_18, B=B)
})
#Save results
saveRDS(R31, file = "results/scenario_18_R31.rds")
#Read results
R31 <- readRDS("results/scenario_18_R31.rds")
R31
##independence, ar1
system.time ({
R32 <- simfct_parallel(sample_size = N_large,rows_no = rows_small,
cols_no = cols_large, rho = rho_high,
phi = phi_low, n_sim =10000, covariates=p_500,
intercept="row_intercept",
max_iter = 20, tol = 1e-6,
corstr_rows = "independence",
corstr_cols = "ar1",
family = gaussian(), alpha=0.05, a_R=a_R_18, B=B)
})
#Save results
saveRDS(R32, file = "results/scenario_18_R32.rds")
#Read results
R32 <- readRDS("results/scenario_18_R32.rds")
R32
##independence, Exchangeable
system.time ({
R33 <- simfct_parallel(sample_size = N_large,rows_no = rows_small,
cols_no = cols_large, rho = rho_high,
phi = phi_low, n_sim =10000, covariates=p_500,
intercept="row_intercept",
max_iter = 20, tol = 1e-6,
corstr_rows = "independence",
corstr_cols = "Exchangeable",
family = gaussian(), alpha=0.05, a_R=a_R_18, B=B)
})
#Save results
saveRDS(R33, file = "results/scenario_18_R33.rds")
#Read results
R33 <- readRDS("results/scenario_18_R33.rds")
R33
##Exchangeable, ar1
system.time ({
R34 <- simfct_parallel(sample_size = N_large,rows_no = rows_small,
cols_no = cols_large, rho = rho_high,
phi = phi_low, n_sim =10000, covariates=p_500,
intercept="row_intercept",
max_iter = 20, tol = 1e-6,
corstr_rows = "Exchangeable",
corstr_cols = "ar1",
family = gaussian(), alpha=0.05, a_R=a_R_18, B=B)
})
datagen <- function(sample_size, rows_no, cols_no, rho, phi,
a_R, covariates, B) {
sigma_R <- matrix(rho, nrow = rows_no, ncol = rows_no)
diag(sigma_R) <- 1
sigma_C <- outer(1:cols_no, 1:cols_no, function(i, j) phi^abs(i - j))
one_C_T <- matrix(1, nrow = 1, ncol = cols_no)
intercept_mat <- a_R %*% one_C_T
Y_big <- matrix(NA, nrow = rows_no, ncol = sample_size * cols_no)
has_covariates <- !is.null(covariates) && !is.null(B)
if (has_covariates) {
q <- nrow(B)
} else {
q <- 0
}
for (i in 1:sample_size) {
if (has_covariates) {
X_i <- covariates[((i - 1) * q + 1):(i * q)]
cov_effect_i <- matrix(1, rows_no, 1) %*% (t(B) %*% X_i) %*% one_C_T
} else {
cov_effect_i <- matrix(0, nrow = rows_no, ncol = cols_no)
}
expected_i <- intercept_mat + cov_effect_i
Y_i <- matrixNormal::rmatnorm(M = expected_i, U = sigma_R, V = sigma_C)
col_range <- ((i - 1) * cols_no + 1):(i * cols_no)
Y_big[, col_range] <- Y_i
}
return(list(
y = Y_big,
intercept = a_R
))
}
library(parallel)
simfct_parallel <- function(sample_size, rows_no, cols_no, rho, phi, covariates, intercept, max_iter,
corstr_rows, corstr_cols, tol, family, n_sim, alpha, a_R, B) {
has_covariates <- !is.null(covariates) && !is.null(B)
true_params <- if (has_covariates) c(a_R, as.vector(B)) else a_R
parameters_no <- length(true_params)
parameters_no <- length(true_params)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterEvalQ(cl, {
library(matrixgee)
})
clusterExport(cl, varlist = c("datagen", "sample_size", "rows_no", "cols_no", "rho", "phi",
"a_R", "covariates", "intercept", "max_iter", "corstr_rows", "corstr_cols", "tol",
"B", "true_params", "parameters_no","has_covariates"), envir = environment())
sim_results <- parLapply(cl, 1:n_sim, function(n) {
data_sim <- datagen(sample_size, rows_no, cols_no, rho, phi, a_R, covariates, B)
long_d <- data_sim$y
model <- matrixgee::matrixgee_cpp(long_d, covariates, intercept, sample_size,
rows_no, cols_no, max_iter, tol,
corstr_rows, corstr_cols)
estimates <- model$beta_hat
bias <- estimates - true_params
frobenius <- sqrt(sum(bias^2))
var_result <- model$robust_covariance
var_betas <- sqrt(diag(var_result))
se <- var_betas
sd <- var_betas^2
independent_model <- matrixgee::matrixgee_cpp(long_d, covariates, intercept, sample_size,
rows_no, cols_no, max_iter, tol,
corstr_rows = "independence",
corstr_cols = "independence")
var_indp <- independent_model$robust_covariance
estimates_indep <- independent_model$beta_hat
are <- diag(var_indp) / diag(var_result)
ARE_det <- det(var_indp) / det(var_result)
wald <- (estimates - true_params)^2 / sd
pvals <- 1 - pchisq(wald, df = 1)
list(estimates = estimates,
estimates_indep = estimates_indep,
bias = bias,
frobenius = frobenius,
se = se,
var = sd,
are = are,
ARE_det = ARE_det,
pvals = pvals,
robust_cov = model$robust_covariance,
robust_cov_indep = independent_model$robust_covariance,
estimates_indep = independent_model$beta_hat)
})
stopCluster(cl)
extract_mat <- function(name) do.call(cbind, lapply(sim_results, `[[`, name))
### RMSE per parameter then average across parameters
estimates_mat <- extract_mat("estimates")
#print(estimates_mat)
errors_sq <- (estimates_mat - matrix(true_params, nrow = parameters_no, ncol = n_sim))^2
rmse_per_param <- sqrt(rowMeans(errors_sq))
method1_total <- mean(rmse_per_param)
### Bias method 2
averaged_estimates <- rowMeans(estimates_mat)
method2_bias_frob <- sqrt(sum((averaged_estimates - true_params)^2))
averaged_bias <- rowMeans(extract_mat("bias"))
averaged_se <- rowMeans(extract_mat("se"))
averaged_var <- rowMeans(extract_mat("var"))
averaged_are <- rowMeans(extract_mat("are"))
frobenius_all <- sapply(sim_results, `[[`, "frobenius")
ARE_det_all <- sapply(sim_results, `[[`, "ARE_det")
###P-values and type 1 error
p_matrix <- extract_mat("pvals")
no_reject_H0_freq <- rowMeans(p_matrix > 0.05)
min_freq <- min(no_reject_H0_freq)
max_freq <- max(no_reject_H0_freq)
median_freq <- median(no_reject_H0_freq)
overall_non_rejection_freq <- mean(no_reject_H0_freq)
##MAB
abs_bias_mat <- abs(estimates_mat - matrix(true_params, nrow = parameters_no, ncol = n_sim))
mab_per_param <- rowMeans(abs_bias_mat)
MAB <- mean(mab_per_param)
#MSE
errors_sq <- (estimates_mat - matrix(true_params, nrow = parameters_no, ncol = n_sim))^2
mse_per_param <- rowMeans(errors_sq)
overall_MSE <- mean(mse_per_param)
estimates_df <- as.data.frame(t(extract_mat("estimates")))
estimates_indp_df <- as.data.frame(t(extract_mat("estimates_indep")))
empirical_cov <- cov(estimates_df)
indp_cov <- cov(estimates_indp_df)
ARE_empirical <- det(indp_cov)/det(empirical_cov)
list(
ARE_det_calc_averaged = mean(ARE_det_all),
Average_RMSE = method1_total,
Frob_method2 = method2_bias_frob,
MAB = MAB,
MSE = overall_MSE,
p_freq = overall_non_rejection_freq,
p_freq_min = min_freq,
p_freq_max = max_freq,
p_freq_median = median_freq,
ARE_robust_vs_empirical = ARE_empirical
)
}
library(dplyr)
library(matrixgee)
library(stringr)
library(xtable)
source("set-up/set_up_design_kron.R")
rows_no_18 <- rows_small
a_R_18 <- a_R_linear(rows_no_18)
##Exchangeable, ar1
system.time ({
R34 <- simfct_parallel(sample_size = N_large,rows_no = rows_small,
cols_no = cols_large, rho = rho_high,
phi = phi_low, n_sim =10000, covariates=p_500,
intercept="row_intercept",
max_iter = 20, tol = 1e-6,
corstr_rows = "Exchangeable",
corstr_cols = "ar1",
family = gaussian(), alpha=0.05, a_R=a_R_18, B=B)
})
#Save results
saveRDS(R34, file = "results/scenario_18_R34.rds")
#Read results
R34 <- readRDS("results/scenario_18_R34.rds")
R34
##Exchangeable, Exchangeable
system.time ({
R35 <- simfct_parallel(sample_size = N_large,rows_no = rows_small,
cols_no = cols_large, rho = rho_high,
phi = phi_low, n_sim =10000, covariates=p_500,
intercept="row_intercept",
max_iter = 20, tol = 1e-6,
corstr_rows = "Exchangeable",
corstr_cols = "Exchangeable",
family = gaussian(), alpha=0.05, a_R=a_R_18, B=B)
})
#Save results
saveRDS(R35, file = "results/scenario_18_R35.rds")
#Read results
R35 <- readRDS("results/scenario_18_R35.rds")
R35
## ar1, Exchangeable
system.time ({
R36 <- simfct_parallel(sample_size = N_large,rows_no = rows_small,
cols_no = cols_large, rho = rho_high,
phi = phi_low, n_sim =10000, covariates=p_500,
intercept="row_intercept",
max_iter = 20, tol = 1e-6,
corstr_rows = "ar1",
corstr_cols = "Exchangeable",
family = gaussian(), alpha=0.05, a_R=a_R_18, B=B)
})
#Save results
saveRDS(R36, file = "results/scenario_18_R36.rds")
#Read results
R36 <- readRDS("results/scenario_18_R36.rds")
R36
##Exchangeable, independence
system.time ({
R37 <- simfct_parallel(sample_size = N_large,rows_no = rows_small,
cols_no = cols_large, rho = rho_high,
phi = phi_low, n_sim =10000, covariates=p_500,
intercept="row_intercept",
max_iter = 20, tol = 1e-6,
corstr_rows = "Exchangeable",
corstr_cols = "independence",
family = gaussian(), alpha=0.05, a_R=a_R_18, B=B)
})
#Save results
saveRDS(R37, file = "results/scenario_18_R37.rds")
#Read results
R37 <- readRDS("results/scenario_18_R37.rds")
R37
##ar1, independence
system.time ({
R38 <- simfct_parallel(sample_size = N_large,rows_no = rows_small,
cols_no = cols_large, rho = rho_high,
phi = phi_low, n_sim =10000, covariates=p_500,
intercept="row_intercept",
max_iter = 20, tol = 1e-6,
corstr_rows = "ar1",
corstr_cols = "independence",
family = gaussian(), alpha=0.05, a_R=a_R_18, B=B)
})
#Save results
saveRDS(R38, file = "results/scenario_18_R38.rds")
#Read results
R38 <- readRDS("results/scenario_18_R38.rds")
R38
R_summary_500 <- bind_rows(
extract_results("results/scenario_18_R31.rds", "independence", "independence", N=500),
extract_results("results/scenario_18_R32.rds", "independence", "ar1", N=500),
extract_results("results/scenario_18_R33.rds", "independence", "Exchangeable", N=500),
extract_results("results/scenario_18_R34.rds", "Exchangeable", "ar1", N=500),
extract_results("results/scenario_18_R35.rds", "Exchangeable", "Exchangeable", N=500),
extract_results("results/scenario_18_R36.rds", "ar1", "Exchangeable", N=500),
extract_results("results/scenario_18_R37.rds", "Exchangeable", "independence", N=500),
extract_results("results/scenario_18_R38.rds", "ar1", "independence", N=500)
)
R_summary_500
R_all <- bind_rows(R_summary_50 %>% mutate(N = 50),
R_summary_100 %>% mutate(N = 100),
R_summary_500 %>% mutate(N = 500))
latex_table <- R_all %>%
arrange(RowCorr, ColCorr, N) %>%
mutate(SampleSize = paste0("N=", N)) %>%
select(RowCorr, ColCorr, SampleSize,
ARE, RMSE, Frob, MAB, MSE, Errmean,
MinErr, MaxErr, MedianErr, AREemp) %>%
group_by(RowCorr, ColCorr) %>%
mutate(
RowCorr = replace(RowCorr, row_number() != 1, ""),
ColCorr = replace(ColCorr, row_number() != 1, "")
) %>%
ungroup()
#latex_table <- latex_table %>%
#mutate(across(where(is.numeric), ~ round(.x, 4)))
#latex_table[, 4:ncol(latex_table)] <- format(round(latex_table[, 4:ncol(latex_table)], 4), nsmall = 4)
latex_table <- latex_table %>%
mutate(across(
.cols = 4:ncol(.),
.fns = ~ format(round(.x, 4), nsmall = 4),
.names = "{.col}"
))
xtab <- xtable(latex_table,
caption = "Simulation Results Across Sample Sizes-sCENARIO4",
label = "tab:sim-results")
cat("\\begin{flushleft}\n")
print(xtab,
include.rownames = FALSE,
booktabs = TRUE,
caption.placement = "top",
sanitize.colnames.function = identity,
add.to.row = list(pos = list(0), command = "\\begin{flushleft}\\scriptsize\n"),
table.placement = "H")
cat("\\end{flushleft}\n")
rows_no_19 <- rows_small
a_R_19 <- a_R_const(rows_no_19)
##independence, independence
system.time ({
S11 <- simfct_parallel(sample_size = N_small,rows_no = rows_small,
cols_no = cols_large, rho = rho_low,
phi = phi_high, n_sim =10000, covariates=p_50,
intercept="row_intercept",
max_iter = 20, tol = 1e-6,
corstr_rows = "independence",
corstr_cols = "independence",
family = gaussian(), alpha=0.05, a_R=a_R_19, B=B)
})
#Save results
saveRDS(S11, file = "results/scenario_19_S11.rds")
#Read results
S11 <- readRDS("results/scenario_19_S11.rds")
S11
##independence, independence
system.time ({
S11 <- simfct_parallel(sample_size = N_small,rows_no = rows_small,
cols_no = cols_large, rho = rho_high,
phi = phi_high, n_sim =10000, covariates=p_50,
intercept="row_intercept",
max_iter = 20, tol = 1e-6,
corstr_rows = "independence",
corstr_cols = "independence",
family = gaussian(), alpha=0.05, a_R=a_R_19, B=B)
})
#Save results
saveRDS(S11, file = "results/scenario_19_S11.rds")
#Read results
S11 <- readRDS("results/scenario_19_S11.rds")
S11
##independence, ar1
system.time ({
S12 <- simfct_parallel(sample_size = N_small,rows_no = rows_small,
cols_no = cols_large, rho = rho_high,
phi = phi_high, n_sim =10000, covariates=p_50,
intercept="row_intercept",
max_iter = 20, tol = 1e-6,
corstr_rows = "independence",
corstr_cols = "ar1",
family = gaussian(), alpha=0.05, a_R=a_R_19, B=B)
})
#Save results
saveRDS(S12, file = "results/scenario_19_S12.rds")
#Read results
S12 <- readRDS("results/scenario_19_S12.rds")
S12
##independence, Exchangeable
system.time ({
S13 <- simfct_parallel(sample_size = N_small,rows_no = rows_small,
cols_no = cols_large, rho = rho_high,
phi = phi_high, n_sim =10000, covariates=p_50,
intercept="row_intercept",
max_iter = 20, tol = 1e-6,
corstr_rows = "independence",
corstr_cols = "Exchangeable",
family = gaussian(), alpha=0.05, a_R=a_R_19, B=B)
})
#Save results
saveRDS(S13, file = "results/scenario_19_S13.rds")
#Read results
S13 <- readRDS("results/scenario_19_S13.rds")
S13
##Exchangeable, ar1
system.time ({
S14 <- simfct_parallel(sample_size = N_small,rows_no = rows_small,
cols_no = cols_large, rho = rho_high,
phi = phi_high, n_sim =10000, covariates=p_50,
intercept="row_intercept",
max_iter = 20, tol = 1e-6,
corstr_rows = "Exchangeable",
corstr_cols = "ar1",
family = gaussian(), alpha=0.05, a_R=a_R_19, B=B)
})
#Save results
saveRDS(S14, file = "results/scenario_19_S14.rds")
#Read results
S14 <- readRDS("results/scenario_19_S14.rds")
S14
